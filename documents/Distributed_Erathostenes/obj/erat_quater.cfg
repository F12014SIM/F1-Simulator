--+-----------------------------------------------
--  This is a distributed Prime Finder program.
--+ Each partition tests whether a given number is divisible by 
--+ its local primes. If it is not, the number is a possible new
--+ prime, hence the partition makes an RPC onto the next partition 
--+ for it to carry out the same test on the prime numbers in its possession.
--+ If there is no more prime to test against, the current number 
--+ is a new prime. A new cell is then allocated on the partition 
--+ that has found the new prime and the current number is added 
--+ to the local prime table of the partition.
--+ When all numbers in the range 2 .. N (where N is a constant set 
--+ in unit main.adb) have been tested, partitions terminate 
--+ and distributed termination detection takes place.
--+
--+ There are multiple instances of the same partition (which have
--+ different fat names, but contain the same code).
--+ All passive partitions (that is, all except the first one) which
--+ are built on unit Prime_Seeker, derive their own New_Pool_Type type from 
--+ the Prime_Pool_Type root type in unit common.ads.
--+ A reference to an object declared in each of these partitions is 
--+ registered to Controller, which is located in the single active
--+ partition. When all the expected references are registered, 
--+ Controller builds a token ring and provides each partition with 
--+ a reference to the object of access-to-class-wide type belonging
--+ to its neighbor, which allows to make a dynamically-bound dispatching
--+ RPC to it.
--+ Some remote subprograms are made asynchronous, so that the caller
--+ is not blocking until the remote execution completes.
--+-----------------------------------------------

configuration Erat_Quater is
   pragma Starter (Ada);
   --  the user activates the first partition only
   --+ (the sole one with an own thread of control)
   --+ while the Ada runtime system activates the other ones
   --+
   --+-----------------------
   --  Partition_1 contains the RCI packages (Controller and Results) 
   --+ and also gets allocated the sole thread of control in the whole distributed application
   --+
   Partition_1 : Partition := (Primes, Controller, Results);
   procedure Main is in Partition_1;
   --  All other partitions are passive and only execute RPC
   --+ issued by the Main thread
   --+
   Partition_2 : Partition := (Primes);
   Partition_3 : Partition := (Primes);
   Partition_4 : Partition := (Primes);
   --  as many partitions as we like as long as the total number 
   --+ corresponds to the value set to Common.Partitions
   --+
   for Partition'Directory use "bin";
   --  the executable code of all partitions is to be found under directory ./bin
   --+
end Erat_Quater;
